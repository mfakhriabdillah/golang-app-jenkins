pipeline {
    agent {
        label 'docker'
    }
    environment {
        GCP_SERVICE_ACCOUNT = credentials('GCP_SERVICE_ACCOUNT')
    }

    stages {
        stage('Build Container Image') {
            steps {
                echo 'Building Container Image from code...'
                sh 'docker build -t asia-southeast2-docker.pkg.dev/studidevops-batch-12/golang-app-jenkins/goapp:1.${BUILD_NUMBER} .'
                sh 'docker image ls'
            }
        }
        stage('Push Image to GAR') {
            steps {
                sh 'gcloud auth activate-service-account $(cat ${GCP_SERVICE_ACCOUNT} | jq -r .client_email) --key-file=${GCP_SERVICE_ACCOUNT}'
                sh 'gcloud auth configure-docker asia-southeast2-docker.pkg.dev --quiet'
                sh 'docker push asia-southeast2-docker.pkg.dev/studidevops-batch-12/golang-app-jenkins/goapp:1.${BUILD_NUMBER}'
            }
        }
        stage('Deploy to Kubernetes Cluter via Helm') {
            steps {
                sh 'gcloud container clusters get-credentials golang-jenkins --zone asia-southeast2-b --project studidevops-batch-12'
                sh 'kubectl get nodes'
                sh 'helm upgrade --install goapp-dev ./golang-application --set image.repository="asia-southeast2-docker.pkg.dev/studidevops-batch-12/golang-app-jenkins/goapp" --set image.tag="1.${BUILD_NUMBER}" --set service.port="8080"'
            }
        }
    }
}
